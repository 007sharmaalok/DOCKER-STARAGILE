Pods in Kubernetes:



In k8s the pods will always be scheduled on the worker node
In kubernetes we write the code to create Pod using a single line command or using a manifest file.

# kubectl run pod1 --image nginx

# kubectl get pods

# kubectl get pods -o wide

# kubectl describe pod pod1 | less

# kubectl delete pod pod1

Press q to come out of the above command.


===========================================



Create a Objects using a manifest YAML file.
=========================================

https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.31/#-strong-api-groups-strong-


FIELDS:
  apiVersion    <string>
    APIVersion defines the versioned schema of this representation of an object.
    Servers should convert recognized schemas to the latest internal value, and
    may reject unrecognized values. More info:
    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources


  kind  <string>
    Kind is a string value representing the REST resource this object
    represents. Servers may infer this from the endpoint the client submits
    requests to. Cannot be updated. In CamelCase. More info:
    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

metadata      <ObjectMeta>
    If the Labels of a ReplicaSet are empty, they are defaulted to be the same
    as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More
    info:
    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata


  spec  <ReplicaSetSpec>
    Spec defines the specification of the desired behavior of the ReplicaSet.
    More info:
    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status




Demo1:
====================

# mkdir mykubefiles

# cd mykubefiles

# vim pod-defintion.yml

kind: Pod
apiVersion: v1
metadata:
 name: pod2
 labels: # any key and value pair
  author: sonal
  type: webserver
  env: dev
spec:
 containers:
  - name: c1
    image: nginx
  - name: c2
    image: tomcat
  - name: c3
    image: ubuntu
    command: ["bash", "-c", "sleep 6000"]



# kubectl create -f pod-defintion.yml

# kubectl get pods

# kubectl logs pod2 -c c1

Get number of containers in a pod:

# kubectl get pods pod2 -o jsonpath='{.spec.containers[*].name}'

# kubectl delete pod pod2


==================================================
Service Object
===================================================
ClusterIP
NodePort
LoadBalancer



ClusterIP:
===========================================

Services in Kubernetes:


Service: 
> It is also a resource in Kubernetes
> Allows communication between pods within the cluster or outside the cluster
> exposes the application of the pod to be accessed by a another Pod in the Cluster.
> Exposes the application of the pod to be accessed by an external User outside the Cluster.

Why do we need a Service resource in Kubernetes?

Problems:
=======================
> Pods should not communicate via the pod Ip address as the pod is recreated the pod Ip changes 

> Pod Could not resolve by its name -> you cannot communicate to the pod via its name

> You cannot access the pod outside the cluster -> using its PODIP or using the serviceIP 

Service resource in Kubernetes will help you overcome the Problems
=================================
Service object exposes the application of 1 pod to another pod for communication

3 types of service:
> ClusterIP : It is a service that is created when we want 2 pods to communicate within the cluster

====================================

Create Pod - nginx

apiVersion: v1
kind: Pod
metadata:
 name: pod1
 labels:
  app: webserver
spec:
 containers:
  - name: c1
    image: nginx

===================================

# vim test-pod.yml

kind: Pod
apiVersion: v1
metadata:
 name: test-pod
spec:
 containers:
  - name: c1
    image: ubuntu
    command: ["bash", "-c", "sleep 6000"]



==================================
# vim service.yml

apiVersion: v1
kind: Service
metadata: 
 name: mysvc
spec:
 type: ClusterIP
 selector:
  app: webserver  
 ports:
 - targetPort: 80 
   port: 80  


# kubeclt create -f pod-defintion.yml
# kubectl create -f test-pod.yml
# kubectl create -f service.yml
# kubectl get svc

# kubectl get endpoints

# kubectl exec -it test-pod -- bash

In the pod install curl

# apt-get update && apt-get install curl -y

# curl mysvc

=======================================================

